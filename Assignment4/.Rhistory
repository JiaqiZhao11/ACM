# Check if any existing Stan packages are installed
{
## Check for existing installations
stan_packages <- installed.packages()[
grepl("cmdstanr|rstan$|StanHeaders|brms$",
installed.packages()[, 1]), 1]
## Remove any existing Stan packages
if (length(stan_packages) > 0) {
remove.packages(c("StanHeaders", "rstan", "brms"))
}
## Delete any pre-existing RData file
if (file.exists(".RData")) {
file.remove(".RData")
}
}
# Check if packages necessary for later installation steps are installed
{
## Retrieve installed packages
pkgs <- installed.packages()[, 1]
## Check if rstudioapi is installed
if (isTRUE(all.equal(grep("rstudioapi", pkgs), integer(0)))) {
print("Installing the {rstudioapi} package")
install.packages("rstudioapi")
}
## Check if remotes is installed
if (isTRUE(all.equal(grep("remotes", pkgs), integer(0)))) {
print("Installing the {remotes} package")
install.packages("remotes")
}
## Else print a message
else {
print("{remotes} and {rstudioapi} packages are already installed")
}
}
# Install the development versions of rstan and StanHeaders
install.packages(
pkgs = "rstan",
repos = c(
"https://mc-stan.org/r-packages/",
getOption("repos")
))
# Install the latest development version of brms from github
remotes::install_github("paul-buerkner/brms")
# Install cmdstanr from github
remotes::install_github("stan-dev/cmdstanr")
# Check that the C++ Toolchain is Configured
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
# Install cmdstan version 2.31
cmdstanr::install_cmdstan(
cores = parallel::detectCores(logical = FALSE),
overwrite = TRUE,
cpp_options = list("STAN_THREADS" = TRUE),
check_toolchain = TRUE
)
# Verify that cmdstan installed successfully
(cmdstan.version <- cmdstanr::cmdstan_version())
# Ensure cmdstan path is set properly
cmdstanr::set_cmdstan_path(
path = paste(
Sys.getenv("HOME"),
"/.cmdstan/cmdstan-",
cmdstan.version,
sep = ""
))
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
Sys.which("make")
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make install-tbb",
workingDir = cmdstanr::cmdstan_path()
)
# Verify that cmdstan installed successfully
(cmdstan.version <- cmdstanr::cmdstan_version())
[1] "2.31.0"
# Verify that cmdstan installed successfully
(cmdstan.version <- cmdstanr::cmdstan_version())
# Execute `mingw32-make install-tbb` in the terminal
rstudioapi::terminalExecute(
command = "mingw32-make examples/bernoulli/bernoulli.exe",
workingDir = cmdstanr::cmdstan_path()
)
# load packages
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork,
here,
bbmle,
extraDistr,
readr,
dplyr
)
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.5
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(x = 1:nrow(.), y = u))+geom_line(aes(y = association))+geom_point()+geom_point(aes(x = 1:200, y = per_con), col = "red")+geom_point(aes(x = 1:200, y = stim-0.1), col = "blue")
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(as.factor(stim), y = percept))+geom_boxplot()
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(percept, y = association))+geom_point()+geom_smooth(method = "lm")+facet_grid(~cue)
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(as.factor(pred), y = percept, col = as.factor(stim)))+geom_boxplot()+facet_grid(~cue)
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.5
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
percepmu = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
w2 = 0.3
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
percepmu = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
warnings()
rm_agent = function(bias,trials){
u = c()
for (i in 1:length(trials)){
u1 = rbinom(n = trials[i], size = 1, prob = bias[i])
u = c(u,u1)
}
return(u)
}
source((here("~","Advanced-cognitive-modeling","assignment2","hgf_agent.R")))
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.9
w2 = 0.3
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
percepmu = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
percepmu[i] = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
perceptmu[i] = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
rm_agent = function(bias,trials){
u = c()
for (i in 1:length(trials)){
u1 = rbinom(n = trials[i], size = 1, prob = bias[i])
u = c(u,u1)
}
return(u)
}
source((here("~","Advanced-cognitive-modeling","assignment2","hgf_agent.R")))
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.9
w2 = 0.3
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
perceptmu[i] = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
stim[i] = ifelse(stim[i] == 0, 0.01, ifelse(stim[i] == 1, 0.99, stim[i]))
i = 1
stim[i]
stim[i] = ifelse(stim[i] == 0, 0.01, ifelse(stim[i] == 1, 0.99, stim[i]))
stim[1]
stim[2] = 1
stim[i] = ifelse(stim[i] == 0, 0.01, ifelse(stim[i] == 1, 0.99, stim[i]))
stim[2]
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.9
w2 = 0.3
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
stim[i] = ifelse(stim[i] == 0, 0.01, ifelse(stim[i] == 1, 0.99, stim[i]))
exp[i] = ifelse(exp[i] == 0, 0.01, ifelse(exp[i] == 1, 0.99, exp[i]))
perceptmu[i] = inv_logit_scaled(w1 * logit_scaled(stim[i] + w2 * logit_scaled(exp[i])))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(x = 1:nrow(.), y = u))+geom_line(aes(y = association))+geom_point()+geom_point(aes(x = 1:200, y = per_con), col = "red")+geom_point(aes(x = 1:200, y = stim-0.1), col = "blue")
dd
trials = c(50,50,50,50)
bias = rep(c(0.1,0.9,0.1,0.9),trials)
cue = rbinom(sum(trials),1,0.5)
stim = array(sum(trials, NA))
for(i in 1:200){
stim[i] = ifelse(cue[i] == 1, rbinom(1,1,bias[i]), rbinom(1,1,(1-bias[i])))
}
u = ifelse(cue == stim, 1,0)
dd = data.frame(stim = stim, cue = cue, u = u)
dd %>% ggplot(aes(x = 1:nrow(.), y = u, col = as.factor(stim)))+geom_point()+theme_classic()
ntrials = sum(trials)
percept = array(NA, ntrials)
perceptmu = array(NA, ntrials)
exp = array(NA, ntrials)
association = array(NA, ntrials)
per_con = array(NA, ntrials)
pred = array(NA,ntrials)
association[1] = 0.5
alpha = 0.2
w1 = 0.9
w2 = 0.3
for (i in seq(ntrials)){
exp[i] = ifelse(cue[i] == 1, association[i], 1-association[i])
pred[i] = rbinom(1,1,exp[i])
# correlated weight / Resterla Wagner paradigm
#perceptmu[i] = ifelse(w1*stim[i]+(1-w1)*exp[i] == 0, 0.01, ifelse(w1*stim[i]+(1-w1)*exp[i] == 1, 0.99,w1*stim[i]+(1-w1)*exp[i]))
# Bayesian inference paradigm: weighted Bayes ## Do we add bias here?
stim[i] = ifelse(stim[i] == 0, 0.01, ifelse(stim[i] == 1, 0.99, stim[i]))
exp[i] = ifelse(exp[i] == 0, 0.01, ifelse(exp[i] == 1, 0.99, exp[i]))
perceptmu[i] = inv_logit_scaled(w1 * logit_scaled(stim[i]) + w2 * logit_scaled(exp[i]))
percept[i] = extraDistr::rprop(1,10,perceptmu[i])
per_con[i] = ifelse(cue[i] == 1, percept[i], 1-percept[i])
association[i+1] = association[i]+alpha*(per_con[i] -association[i])
}
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(x = 1:nrow(.), y = u))+geom_line(aes(y = association))+geom_point()+geom_point(aes(x = 1:200, y = per_con), col = "red")+geom_point(aes(x = 1:200, y = stim-0.1), col = "blue")
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(as.factor(stim), y = percept))+geom_boxplot()
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(percept, y = association))+geom_point()+geom_smooth(method = "lm")+facet_grid(~cue)
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(as.factor(pred), y = percept, col = as.factor(stim)))+geom_boxplot()+facet_grid(~cue)
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(percept, y = association))+geom_point()+geom_smooth(method = "lm")+facet_grid(~cue)
data.frame(stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200], cue = cue[1:200]) %>% ggplot(aes(as.factor(pred), y = percept, col = as.factor(stim)))+geom_boxplot()+facet_grid(~cue)
data.frame(per_con = per_con[1:200],stim = stim[1:200], percept = percept[1:200], pred = pred[1:200],association = association[1:200]) %>%
ggplot(aes(x = 1:nrow(.), y = u))+geom_line(aes(y = association))+geom_point()+geom_point(aes(x = 1:200, y = per_con), col = "red")+geom_point(aes(x = 1:200, y = stim-0.1), col = "blue")
setwd("~/ACM/Assignment4")
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork,
here,
bbmle,
extraDistr,
readr,
dplyr
)
df = read_csv(here::here("assignment4", "AlienData.txt"))
df = read_csv(here::here("assignment4", "AlienData.txt"))
df = read_csv(here::here("assignment4", "AlienData.txt"))
